{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\priya\\\\Downloads\\\\sample\\\\food-delivery-app\\\\frontend\\\\src\\\\components\\\\RestaurantImage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getRestaurantImage, validateImageUrl } from '../utils/imageUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RestaurantImage = ({\n  restaurant,\n  className\n}) => {\n  _s();\n  const [imageError, setImageError] = useState(false);\n\n  // State to store the final image source\n  const [imageSource, setImageSource] = useState('');\n\n  // Use effect to handle image loading and fallbacks\n  useEffect(() => {\n    // Function to preload image and check if it loads correctly\n    const preloadImage = url => {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.src = url;\n        img.onload = () => resolve(url);\n        img.onerror = () => reject(new Error('Image failed to load'));\n      });\n    };\n    const loadImage = async () => {\n      try {\n        // If we already have an error or no images, use fallback immediately\n        if (imageError || !restaurant.images || restaurant.images.length === 0) {\n          setImageSource(getRestaurantImage(restaurant.cuisine, restaurant._id));\n          return;\n        }\n\n        // Try to load the restaurant image\n        const validUrl = validateImageUrl(restaurant.images[0]);\n        await preloadImage(validUrl);\n        setImageSource(validUrl);\n      } catch (error) {\n        // If loading fails, use fallback image based on cuisine\n        console.log(`Image failed to load for ${restaurant.name}, using fallback`);\n        setImageSource(getRestaurantImage(restaurant.cuisine, restaurant._id));\n      }\n    };\n    loadImage();\n  }, [restaurant, imageError]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: imageSource ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageSource,\n      alt: restaurant.name,\n      className: className || '',\n      onError: () => setImageError(true),\n      loading: \"lazy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-placeholder\",\n      style: {\n        backgroundColor: '#f0f0f0',\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: restaurant.name[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(RestaurantImage, \"7Wo7mUpGk+MJkGGpXPAoKX7oBpE=\");\n_c = RestaurantImage;\nexport default RestaurantImage;\nvar _c;\n$RefreshReg$(_c, \"RestaurantImage\");","map":{"version":3,"names":["React","useState","useEffect","getRestaurantImage","validateImageUrl","jsxDEV","_jsxDEV","Fragment","_Fragment","RestaurantImage","restaurant","className","_s","imageError","setImageError","imageSource","setImageSource","preloadImage","url","Promise","resolve","reject","img","Image","src","onload","onerror","Error","loadImage","images","length","cuisine","_id","validUrl","error","console","log","name","children","alt","onError","loading","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","width","height","display","alignItems","justifyContent","_c","$RefreshReg$"],"sources":["C:/Users/priya/Downloads/sample/food-delivery-app/frontend/src/components/RestaurantImage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getRestaurantImage, validateImageUrl } from '../utils/imageUtils';\n\nconst RestaurantImage = ({ restaurant, className }) => {\n  const [imageError, setImageError] = useState(false);\n  \n  // State to store the final image source\n  const [imageSource, setImageSource] = useState('');\n  \n  // Use effect to handle image loading and fallbacks\n  useEffect(() => {\n    // Function to preload image and check if it loads correctly\n    const preloadImage = (url) => {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.src = url;\n        img.onload = () => resolve(url);\n        img.onerror = () => reject(new Error('Image failed to load'));\n      });\n    };\n    \n    const loadImage = async () => {\n      try {\n        // If we already have an error or no images, use fallback immediately\n        if (imageError || !restaurant.images || restaurant.images.length === 0) {\n          setImageSource(getRestaurantImage(restaurant.cuisine, restaurant._id));\n          return;\n        }\n        \n        // Try to load the restaurant image\n        const validUrl = validateImageUrl(restaurant.images[0]);\n        await preloadImage(validUrl);\n        setImageSource(validUrl);\n      } catch (error) {\n        // If loading fails, use fallback image based on cuisine\n        console.log(`Image failed to load for ${restaurant.name}, using fallback`);\n        setImageSource(getRestaurantImage(restaurant.cuisine, restaurant._id));\n      }\n    };\n    \n    loadImage();\n  }, [restaurant, imageError]);\n\n  return (\n    <>\n      {imageSource ? (\n        <img\n          src={imageSource}\n          alt={restaurant.name}\n          className={className || ''}\n          onError={() => setImageError(true)}\n          loading=\"lazy\"\n        />\n      ) : (\n        <div className=\"image-placeholder\" style={{ backgroundColor: '#f0f0f0', width: '100%', height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n          <span>{restaurant.name[0]}</span>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default RestaurantImage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}