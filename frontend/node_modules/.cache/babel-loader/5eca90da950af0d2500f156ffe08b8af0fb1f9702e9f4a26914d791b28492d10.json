{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\priya\\\\Downloads\\\\sample\\\\food-delivery-app\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [loading, setLoading] = useState(true);\n\n  // Set axios default headers\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  }, [token]);\n\n  // Load user if token exists (using mock data instead of API call)\n  useEffect(() => {\n    const loadUser = async () => {\n      if (token) {\n        // Use mock user data instead of API call\n        setUser({\n          _id: 'user123',\n          name: 'Demo User',\n          email: 'user@example.com',\n          role: 'user'\n        });\n      }\n      setLoading(false);\n    };\n    loadUser();\n  }, [token]);\n\n  // Register user (mock implementation)\n  const register = async userData => {\n    try {\n      // Mock successful registration\n      const mockToken = 'mock-token-' + Date.now();\n      const mockUser = {\n        _id: 'user' + Date.now(),\n        name: userData.name,\n        email: userData.email,\n        role: 'user'\n      };\n      localStorage.setItem('token', mockToken);\n      setToken(mockToken);\n      setUser(mockUser);\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Registration failed'\n      };\n    }\n  };\n\n  // Login user (mock implementation)\n  const login = async (email, password) => {\n    try {\n      // Mock successful login\n      // In a real app, you would validate credentials\n      const mockToken = 'mock-token-' + Date.now();\n      const mockUser = {\n        _id: 'user123',\n        name: 'Demo User',\n        email: email,\n        role: 'user'\n      };\n      localStorage.setItem('token', mockToken);\n      setToken(mockToken);\n      setUser(mockUser);\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Invalid credentials'\n      };\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n  };\n\n  // Update user profile (mock implementation)\n  const updateProfile = async userData => {\n    try {\n      // Mock successful profile update\n      setUser(prev => ({\n        ...prev,\n        ...userData\n      }));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Update failed'\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      loading,\n      register,\n      login,\n      logout,\n      updateProfile,\n      isAuthenticated: !!user\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"FXi2zprQ4FdDQp5Badf2jWUNTs8=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","token","setToken","localStorage","getItem","loading","setLoading","defaults","headers","common","loadUser","_id","name","email","role","register","userData","mockToken","Date","now","mockUser","setItem","success","error","message","login","password","logout","removeItem","updateProfile","prev","Provider","value","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/priya/Downloads/sample/food-delivery-app/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [loading, setLoading] = useState(true);\n\n  // Set axios default headers\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  }, [token]);\n\n  // Load user if token exists (using mock data instead of API call)\n  useEffect(() => {\n    const loadUser = async () => {\n      if (token) {\n        // Use mock user data instead of API call\n        setUser({\n          _id: 'user123',\n          name: 'Demo User',\n          email: 'user@example.com',\n          role: 'user'\n        });\n      }\n      setLoading(false);\n    };\n\n    loadUser();\n  }, [token]);\n\n  // Register user (mock implementation)\n  const register = async (userData) => {\n    try {\n      // Mock successful registration\n      const mockToken = 'mock-token-' + Date.now();\n      const mockUser = {\n        _id: 'user' + Date.now(),\n        name: userData.name,\n        email: userData.email,\n        role: 'user'\n      };\n      \n      localStorage.setItem('token', mockToken);\n      setToken(mockToken);\n      setUser(mockUser);\n      \n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Registration failed',\n      };\n    }\n  };\n\n  // Login user (mock implementation)\n  const login = async (email, password) => {\n    try {\n      // Mock successful login\n      // In a real app, you would validate credentials\n      const mockToken = 'mock-token-' + Date.now();\n      const mockUser = {\n        _id: 'user123',\n        name: 'Demo User',\n        email: email,\n        role: 'user'\n      };\n      \n      localStorage.setItem('token', mockToken);\n      setToken(mockToken);\n      setUser(mockUser);\n      \n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Invalid credentials',\n      };\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n  };\n\n  // Update user profile (mock implementation)\n  const updateProfile = async (userData) => {\n    try {\n      // Mock successful profile update\n      setUser(prev => ({\n        ...prev,\n        ...userData\n      }));\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Update failed',\n      };\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        token,\n        loading,\n        register,\n        login,\n        logout,\n        updateProfile,\n        isAuthenticated: !!user,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAACgB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACjE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAE,SAAS,CAAC,MAAM;IACd,IAAIY,KAAK,EAAE;MACTX,KAAK,CAACiB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUR,KAAK,EAAE;IACpE,CAAC,MAAM;MACL,OAAOX,KAAK,CAACiB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;IACvD;EACF,CAAC,EAAE,CAACR,KAAK,CAAC,CAAC;;EAEX;EACAZ,SAAS,CAAC,MAAM;IACd,MAAMqB,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAIT,KAAK,EAAE;QACT;QACAD,OAAO,CAAC;UACNW,GAAG,EAAE,SAAS;UACdC,IAAI,EAAE,WAAW;UACjBC,KAAK,EAAE,kBAAkB;UACzBC,IAAI,EAAE;QACR,CAAC,CAAC;MACJ;MACAR,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;IAEDI,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,CAACT,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMc,QAAQ,GAAG,MAAOC,QAAQ,IAAK;IACnC,IAAI;MACF;MACA,MAAMC,SAAS,GAAG,aAAa,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MAC5C,MAAMC,QAAQ,GAAG;QACfT,GAAG,EAAE,MAAM,GAAGO,IAAI,CAACC,GAAG,CAAC,CAAC;QACxBP,IAAI,EAAEI,QAAQ,CAACJ,IAAI;QACnBC,KAAK,EAAEG,QAAQ,CAACH,KAAK;QACrBC,IAAI,EAAE;MACR,CAAC;MAEDX,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAEJ,SAAS,CAAC;MACxCf,QAAQ,CAACe,SAAS,CAAC;MACnBjB,OAAO,CAACoB,QAAQ,CAAC;MAEjB,OAAO;QAAEE,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QACLD,OAAO,EAAE,KAAK;QACdE,OAAO,EAAE;MACX,CAAC;IACH;EACF,CAAC;;EAED;EACA,MAAMC,KAAK,GAAG,MAAAA,CAAOZ,KAAK,EAAEa,QAAQ,KAAK;IACvC,IAAI;MACF;MACA;MACA,MAAMT,SAAS,GAAG,aAAa,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MAC5C,MAAMC,QAAQ,GAAG;QACfT,GAAG,EAAE,SAAS;QACdC,IAAI,EAAE,WAAW;QACjBC,KAAK,EAAEA,KAAK;QACZC,IAAI,EAAE;MACR,CAAC;MAEDX,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAEJ,SAAS,CAAC;MACxCf,QAAQ,CAACe,SAAS,CAAC;MACnBjB,OAAO,CAACoB,QAAQ,CAAC;MAEjB,OAAO;QAAEE,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QACLD,OAAO,EAAE,KAAK;QACdE,OAAO,EAAE;MACX,CAAC;IACH;EACF,CAAC;;EAED;EACA,MAAMG,MAAM,GAAGA,CAAA,KAAM;IACnBxB,YAAY,CAACyB,UAAU,CAAC,OAAO,CAAC;IAChC1B,QAAQ,CAAC,IAAI,CAAC;IACdF,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;;EAED;EACA,MAAM6B,aAAa,GAAG,MAAOb,QAAQ,IAAK;IACxC,IAAI;MACF;MACAhB,OAAO,CAAC8B,IAAI,KAAK;QACf,GAAGA,IAAI;QACP,GAAGd;MACL,CAAC,CAAC,CAAC;MACH,OAAO;QAAEM,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QACLD,OAAO,EAAE,KAAK;QACdE,OAAO,EAAE;MACX,CAAC;IACH;EACF,CAAC;EAED,oBACEhC,OAAA,CAACC,WAAW,CAACsC,QAAQ;IACnBC,KAAK,EAAE;MACLjC,IAAI;MACJE,KAAK;MACLI,OAAO;MACPU,QAAQ;MACRU,KAAK;MACLE,MAAM;MACNE,aAAa;MACbI,eAAe,EAAE,CAAC,CAAClC;IACrB,CAAE;IAAAF,QAAA,EAEDA;EAAQ;IAAAqC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACvC,GAAA,CA3HWF,YAAY;AAAA0C,EAAA,GAAZ1C,YAAY;AAAA,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}