{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\priya\\\\Downloads\\\\sample\\\\food-delivery-app\\\\frontend\\\\src\\\\components\\\\RestaurantImage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { getRestaurantImage, validateImageUrl } from '../utils/imageUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RestaurantImage = ({\n  restaurant,\n  className\n}) => {\n  _s();\n  const [imageError, setImageError] = useState(false);\n\n  // Get the appropriate image source\n  const getImageSource = () => {\n    if (imageError || !restaurant.images || restaurant.images.length === 0) {\n      return getRestaurantImage(restaurant.cuisine, restaurant._id);\n    }\n\n    // Check if image URL is valid\n    const imageUrl = restaurant.images[0];\n    if (!imageUrl || imageUrl.includes('undefined') || imageUrl.includes('null')) {\n      return getRestaurantImage(restaurant.cuisine, restaurant._id);\n    }\n    return validateImageUrl(imageUrl);\n  };\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: getImageSource(),\n    alt: restaurant.name,\n    className: className || '',\n    onError: () => setImageError(true),\n    loading: \"lazy\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(RestaurantImage, \"gLR0P7wgc8ZXiun/rQPANvAzwwQ=\");\n_c = RestaurantImage;\nexport default RestaurantImage;\nvar _c;\n$RefreshReg$(_c, \"RestaurantImage\");","map":{"version":3,"names":["React","useState","getRestaurantImage","validateImageUrl","jsxDEV","_jsxDEV","RestaurantImage","restaurant","className","_s","imageError","setImageError","getImageSource","images","length","cuisine","_id","imageUrl","includes","src","alt","name","onError","loading","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/priya/Downloads/sample/food-delivery-app/frontend/src/components/RestaurantImage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { getRestaurantImage, validateImageUrl } from '../utils/imageUtils';\n\nconst RestaurantImage = ({ restaurant, className }) => {\n  const [imageError, setImageError] = useState(false);\n  \n  // Get the appropriate image source\n  const getImageSource = () => {\n    if (imageError || !restaurant.images || restaurant.images.length === 0) {\n      return getRestaurantImage(restaurant.cuisine, restaurant._id);\n    }\n    \n    // Check if image URL is valid\n    const imageUrl = restaurant.images[0];\n    if (!imageUrl || imageUrl.includes('undefined') || imageUrl.includes('null')) {\n      return getRestaurantImage(restaurant.cuisine, restaurant._id);\n    }\n    \n    return validateImageUrl(imageUrl);\n  };\n\n  return (\n    <img\n      src={getImageSource()}\n      alt={restaurant.name}\n      className={className || ''}\n      onError={() => setImageError(true)}\n      loading=\"lazy\"\n    />\n  );\n};\n\nexport default RestaurantImage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,kBAAkB,EAAEC,gBAAgB,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3E,MAAMC,eAAe,GAAGA,CAAC;EAAEC,UAAU;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACrD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACA,MAAMW,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAIF,UAAU,IAAI,CAACH,UAAU,CAACM,MAAM,IAAIN,UAAU,CAACM,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;MACtE,OAAOZ,kBAAkB,CAACK,UAAU,CAACQ,OAAO,EAAER,UAAU,CAACS,GAAG,CAAC;IAC/D;;IAEA;IACA,MAAMC,QAAQ,GAAGV,UAAU,CAACM,MAAM,CAAC,CAAC,CAAC;IACrC,IAAI,CAACI,QAAQ,IAAIA,QAAQ,CAACC,QAAQ,CAAC,WAAW,CAAC,IAAID,QAAQ,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;MAC5E,OAAOhB,kBAAkB,CAACK,UAAU,CAACQ,OAAO,EAAER,UAAU,CAACS,GAAG,CAAC;IAC/D;IAEA,OAAOb,gBAAgB,CAACc,QAAQ,CAAC;EACnC,CAAC;EAED,oBACEZ,OAAA;IACEc,GAAG,EAAEP,cAAc,CAAC,CAAE;IACtBQ,GAAG,EAAEb,UAAU,CAACc,IAAK;IACrBb,SAAS,EAAEA,SAAS,IAAI,EAAG;IAC3Bc,OAAO,EAAEA,CAAA,KAAMX,aAAa,CAAC,IAAI,CAAE;IACnCY,OAAO,EAAC;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEN,CAAC;AAAClB,EAAA,CA3BIH,eAAe;AAAAsB,EAAA,GAAftB,eAAe;AA6BrB,eAAeA,eAAe;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}