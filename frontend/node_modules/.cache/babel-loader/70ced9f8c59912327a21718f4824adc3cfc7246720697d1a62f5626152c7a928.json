{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\priya\\\\Downloads\\\\sample\\\\food-delivery-app\\\\frontend\\\\src\\\\components\\\\RestaurantImage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getRestaurantImage, validateImageUrl } from '../utils/imageUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RestaurantImage = ({\n  restaurant,\n  className\n}) => {\n  _s();\n  const [imageError, setImageError] = useState(false);\n\n  // State to store the final image source\n  const [imageSource, setImageSource] = useState('');\n\n  // Use effect to handle image loading and fallbacks\n  useEffect(() => {\n    // Function to preload image and check if it loads correctly\n    const preloadImage = url => {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.src = url;\n        img.onload = () => resolve(url);\n        img.onerror = () => reject(new Error('Image failed to load'));\n      });\n    };\n    const loadImage = async () => {\n      try {\n        // If we already have an error or no images, use fallback immediately\n        if (imageError || !restaurant.images || restaurant.images.length === 0) {\n          setImageSource(getRestaurantImage(restaurant.cuisine, restaurant._id));\n          return;\n        }\n\n        // Try to load the restaurant image\n        const validUrl = validateImageUrl(restaurant.images[0]);\n        await preloadImage(validUrl);\n        setImageSource(validUrl);\n      } catch (error) {\n        // If loading fails, use fallback image based on cuisine\n        console.log(`Image failed to load for ${restaurant.name}, using fallback`);\n        setImageSource(getRestaurantImage(restaurant.cuisine, restaurant._id));\n      }\n    };\n    loadImage();\n  }, [restaurant, imageError]);\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: getImageSource(),\n    alt: restaurant.name,\n    className: className || '',\n    onError: () => setImageError(true),\n    loading: \"lazy\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(RestaurantImage, \"7Wo7mUpGk+MJkGGpXPAoKX7oBpE=\");\n_c = RestaurantImage;\nexport default RestaurantImage;\nvar _c;\n$RefreshReg$(_c, \"RestaurantImage\");","map":{"version":3,"names":["React","useState","useEffect","getRestaurantImage","validateImageUrl","jsxDEV","_jsxDEV","RestaurantImage","restaurant","className","_s","imageError","setImageError","imageSource","setImageSource","preloadImage","url","Promise","resolve","reject","img","Image","src","onload","onerror","Error","loadImage","images","length","cuisine","_id","validUrl","error","console","log","name","getImageSource","alt","onError","loading","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/priya/Downloads/sample/food-delivery-app/frontend/src/components/RestaurantImage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getRestaurantImage, validateImageUrl } from '../utils/imageUtils';\n\nconst RestaurantImage = ({ restaurant, className }) => {\n  const [imageError, setImageError] = useState(false);\n  \n  // State to store the final image source\n  const [imageSource, setImageSource] = useState('');\n  \n  // Use effect to handle image loading and fallbacks\n  useEffect(() => {\n    // Function to preload image and check if it loads correctly\n    const preloadImage = (url) => {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.src = url;\n        img.onload = () => resolve(url);\n        img.onerror = () => reject(new Error('Image failed to load'));\n      });\n    };\n    \n    const loadImage = async () => {\n      try {\n        // If we already have an error or no images, use fallback immediately\n        if (imageError || !restaurant.images || restaurant.images.length === 0) {\n          setImageSource(getRestaurantImage(restaurant.cuisine, restaurant._id));\n          return;\n        }\n        \n        // Try to load the restaurant image\n        const validUrl = validateImageUrl(restaurant.images[0]);\n        await preloadImage(validUrl);\n        setImageSource(validUrl);\n      } catch (error) {\n        // If loading fails, use fallback image based on cuisine\n        console.log(`Image failed to load for ${restaurant.name}, using fallback`);\n        setImageSource(getRestaurantImage(restaurant.cuisine, restaurant._id));\n      }\n    };\n    \n    loadImage();\n  }, [restaurant, imageError]);\n\n  return (\n    <img\n      src={getImageSource()}\n      alt={restaurant.name}\n      className={className || ''}\n      onError={() => setImageError(true)}\n      loading=\"lazy\"\n    />\n  );\n};\n\nexport default RestaurantImage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,kBAAkB,EAAEC,gBAAgB,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3E,MAAMC,eAAe,GAAGA,CAAC;EAAEC,UAAU;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACrD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACA,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACAC,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,YAAY,GAAIC,GAAG,IAAK;MAC5B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtC,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;QACvBD,GAAG,CAACE,GAAG,GAAGN,GAAG;QACbI,GAAG,CAACG,MAAM,GAAG,MAAML,OAAO,CAACF,GAAG,CAAC;QAC/BI,GAAG,CAACI,OAAO,GAAG,MAAML,MAAM,CAAC,IAAIM,KAAK,CAAC,sBAAsB,CAAC,CAAC;MAC/D,CAAC,CAAC;IACJ,CAAC;IAED,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,IAAIf,UAAU,IAAI,CAACH,UAAU,CAACmB,MAAM,IAAInB,UAAU,CAACmB,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;UACtEd,cAAc,CAACX,kBAAkB,CAACK,UAAU,CAACqB,OAAO,EAAErB,UAAU,CAACsB,GAAG,CAAC,CAAC;UACtE;QACF;;QAEA;QACA,MAAMC,QAAQ,GAAG3B,gBAAgB,CAACI,UAAU,CAACmB,MAAM,CAAC,CAAC,CAAC,CAAC;QACvD,MAAMZ,YAAY,CAACgB,QAAQ,CAAC;QAC5BjB,cAAc,CAACiB,QAAQ,CAAC;MAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAC,OAAO,CAACC,GAAG,CAAC,4BAA4B1B,UAAU,CAAC2B,IAAI,kBAAkB,CAAC;QAC1ErB,cAAc,CAACX,kBAAkB,CAACK,UAAU,CAACqB,OAAO,EAAErB,UAAU,CAACsB,GAAG,CAAC,CAAC;MACxE;IACF,CAAC;IAEDJ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAAClB,UAAU,EAAEG,UAAU,CAAC,CAAC;EAE5B,oBACEL,OAAA;IACEgB,GAAG,EAAEc,cAAc,CAAC,CAAE;IACtBC,GAAG,EAAE7B,UAAU,CAAC2B,IAAK;IACrB1B,SAAS,EAAEA,SAAS,IAAI,EAAG;IAC3B6B,OAAO,EAAEA,CAAA,KAAM1B,aAAa,CAAC,IAAI,CAAE;IACnC2B,OAAO,EAAC;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEN,CAAC;AAACjC,EAAA,CAjDIH,eAAe;AAAAqC,EAAA,GAAfrC,eAAe;AAmDrB,eAAeA,eAAe;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}